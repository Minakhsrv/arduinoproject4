;/*******************************************************
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 0.500000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <io.h>
;#include <sleep.h>
;
;// Declare your global variables here
;int key=0, time=0;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0014 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0015 // Place your code here
; 0000 0016 key=1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0017 }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 001B {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001C // Reinitialize Timer 0 value
; 0000 001D TCNT0=0x0C;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001E // Place your code here
; 0000 001F if(key==1)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0020     {
; 0000 0021       time++;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0022       if (time<4)
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0023          {
; 0000 0024          PORTA.0=~PORTA.0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0025          }
; 0000 0026       if(time==4)
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0027         {
; 0000 0028 
; 0000 0029         key=0;
;PCODE: $0000002F VOL: 0
; 0000 002A         time=0;
;PCODE: $00000030 VOL: 0
; 0000 002B         PORTA=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 002C         }
; 0000 002D     }
;PCODE: $00000033 VOL: 0
; 0000 002E }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;
;void main(void)
; 0000 0031 {
;PCODE: $00000038 VOL: 0
; 0000 0032 // Declare your local variables here
; 0000 0033 
; 0000 0034 // Input/Output Ports initialization
; 0000 0035 // Port A initialization
; 0000 0036 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 0037 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (1<<DDA0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0038 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
; 0000 0039 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003A 
; 0000 003B // Port D initialization
; 0000 003C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 003D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 003E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=P Bit1=T Bit0=T
; 0000 003F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0040 
; 0000 0041 // Timer/Counter 0 initialization
; 0000 0042 // Clock source: System Clock
; 0000 0043 // Clock value: 0.488 kHz
; 0000 0044 // Mode: Normal top=0xFF
; 0000 0045 // OC0 output: Disconnected
; 0000 0046 // Timer Period: 0.49971 s
; 0000 0047 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0048 TCNT0=0x0C;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0049 OCR0=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 004A 
; 0000 004B // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 004C TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 004D 
; 0000 004E // External Interrupt(s) initialization
; 0000 004F // INT0: On
; 0000 0050 // INT0 Mode: Falling Edge
; 0000 0051 // INT1: Off
; 0000 0052 // INT2: Off
; 0000 0053 GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0054 MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0055 MCUCSR=(0<<ISC2);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0056 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0057 
; 0000 0058 // Global enable interrupts
; 0000 0059 #asm("sei")
;PCODE: $00000052 VOL: 0
	sei
;PCODE: $00000053 VOL: 0
; 0000 005A 
; 0000 005B while (1)
;PCODE: $00000054 VOL: 0
; 0000 005C       {
; 0000 005D       // Place your code here
; 0000 005E       idle();
;PCODE: $00000055 VOL: 0
; 0000 005F       }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0060 }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
